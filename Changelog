* Added a monadic, QuickCheck-style test which checks that for any random 
  value stored in the environment at a random name we can recover that value.

---

* Added a few HUnit-style tests to tests/Spec.hs to indicate expected successes 
  and failures in parsing the environment.

  * Right now this uses the exception throwing failure mode which we'll have to
    eliminate later.

---

* Added a completely trivial, HSpec-based test suite and it compiles. We'll
  build atop this to specify the application.

---

* Used generalized newtype deriving to get a free Monad instance for
  Parser atop IO. This instance is a little broken since it can only
  throw full runtime errors on failure.
  * We use record syntax to get an automatic `parse` command:
    
* Implemented `Env.get` using this Io-alike monad.
  * Basically just lifts `getEnv` directly.

---

* Fleshed out some Haddock documentation for the interface designed thus far
  * This also includes the usual module prelude which has a special
    presentation in the Haddock files.

---

* Created an example file (src/Example.hs) which outlines the intended usage
  * Right now we use a monadic interface
  * we'll see the limitations inherent in this interface in time...

---

* Ran cabal sandbox init and cabal installed the current zero dependencies
  * this creates a cabal.sandbox.config file, so we're gitignoring that now

---

* checked to ensure that most cabal commands work now
  * cabal configure
  * cabal build
  * cabal repl
  * cabal haddock
  * cabal check

* skeleton source file at src/System/Environment/Parser.hs
  * without this directory cabal will complain

* env-parser.cabal file configured to a good default state for any project
	* includes using the hs-source-dirs directive to pick the src dir
	* also includes a Haddock description (see ekmett/lens for hints here)
  * note that `cabal init` picks up Changelog and README.md as extra-source-files
  * note also that it fills out BSD3 licenses automatically but yells otherwise
  
* .gitignore file for ignoring cabal configuration noise

---

* Makefile with `make step` command
* Initial notes and writeup
* This file

