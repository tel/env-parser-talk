* Reimplemented the Parser using the free applicative interface.
  This moves around a bunch of code but shouldn't change the ultimate 
  package API or any of the behavior.
* Changed the public S.E.Parser interface to just re-export an internal one,
  hiding some details.

---

* Added a local module implementing free applicatives so as to
  not invoke a dependency on `free`.

---

* Wrote some nice Haddock module documentation for Parser.hs
* Added an explicit export list in order to hide the constructor for Parser

---

* Added another semantics to the Parser by adjoining it as a Pair.
  * The new semantics computes all the needed variable names without
    running the Parser
* Introduced spec tests

---

* Removed the Monad instance entirely and reimplemented the 
  Applicative instance directly
  * Now that we examine each side of `(<*>)` together we can 
    combine errors if both sides fail thus getting the behavior
    we were seeking.
* Suddenly, the tests all pass!

---

* Introduced the Env.Parser Applicative instance built atop the
  previous Monad interface.
* Reimplemented the Example.hs module using the Applicative instance
* Reimplemented the test cases using the Applicative instance
* Got rid of LANG GeneralizedNewtypeDeriving. We're not using it anymore.

---

* Changed the signature of Env.Parser to return a list of missing values
* Added a specification that the parser should return all of the missing values
  not just the first one. This spec fails, however.

---

* Implemented a version of Parser which fits this new interface. This required
  writing a custom monad implementation and using lookupEnv over getEnv.
  * Gets the tests to pass

* Created an explicit declaration of Env.parse so that we can attach 
  documentation to it.

---

* Changed the semantics of `Env.parse` to report errors purely instead of relying 
  on exceptions
  * Updated the Spec to account for this as well

---

* Added a monadic, QuickCheck-style test which checks that for any random 
  value stored in the environment at a random name we can recover that value.

---

* Added a few HUnit-style tests to tests/Spec.hs to indicate expected successes 
  and failures in parsing the environment.

  * Right now this uses the exception throwing failure mode which we'll have to
    eliminate later.

---

* Added a completely trivial, HSpec-based test suite and it compiles. We'll
  build atop this to specify the application.

---

* Used generalized newtype deriving to get a free Monad instance for
  Parser atop IO. This instance is a little broken since it can only
  throw full runtime errors on failure.
  * We use record syntax to get an automatic `parse` command:
    
* Implemented `Env.get` using this Io-alike monad.
  * Basically just lifts `getEnv` directly.

---

* Fleshed out some Haddock documentation for the interface designed thus far
  * This also includes the usual module prelude which has a special
    presentation in the Haddock files.

---

* Created an example file (src/Example.hs) which outlines the intended usage
  * Right now we use a monadic interface
  * we'll see the limitations inherent in this interface in time...

---

* Ran cabal sandbox init and cabal installed the current zero dependencies
  * this creates a cabal.sandbox.config file, so we're gitignoring that now

---

* checked to ensure that most cabal commands work now
  * cabal configure
  * cabal build
  * cabal repl
  * cabal haddock
  * cabal check

* skeleton source file at src/System/Environment/Parser.hs
  * without this directory cabal will complain

* env-parser.cabal file configured to a good default state for any project
	* includes using the hs-source-dirs directive to pick the src dir
	* also includes a Haddock description (see ekmett/lens for hints here)
  * note that `cabal init` picks up Changelog and README.md as extra-source-files
  * note also that it fills out BSD3 licenses automatically but yells otherwise
  
* .gitignore file for ignoring cabal configuration noise

---

* Makefile with `make step` command
* Initial notes and writeup
* This file
