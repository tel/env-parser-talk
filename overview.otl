
env-parser-talk
	Project setup
		[X] cabal init
			; ghc-options: -Wall -fwarn-tabs
			extra-source-files: Changelog [UNDOCUMENTED]
				Named one of:
					ChangeLog
					CHANGELOG
					CHANGE_LOG
					Changelog
					changelog
		[X] cabal sandbox
		[X] cabal install --only-dependencies
	Initial sketch
		[X] Example module
			[X] Don't include it in cabal and it won't get distributed
			[X] Stub out just enough of the type information of the module that the example compiles
		[X] Add function and type documentation
		[X] Build our own Monad
			Run command drives semantics of our monad
			; runParser :: Parser a -> IO a
			Read an environment in a subset of the IO monad
			"Run" it
		[X] stylish-haskell
			like `go fmt`
		[X] Type-check
		[X] Compile
		[X] CLI test
	Testing
		[X] Dev-dependencies
			sandbox
			--enable-tests
			[X] Hspec
		[X] Cabal test-suite
		[X] `cabal repl tests` [UNDOCUMENTED]
		[X] HUnit tests
		[X] QuickCheck tests
			[X] use putEnv
		[X] Not TDD, whoops...
		: I'm not a TDD fanatic, but I do like it. That said, I find that 
		: some of the primary advantages of TDD occur also in pure FP.
		: I spend a lot of time designing testable, decomposed interfaces
		: by simply prioritizing purity and composability.
		:
		: In this case I haven't done this much, but that has more to do with
		: simplifying the presentation than anything else.
	Impv: Catch missing ENV failures
		[X] Change return of run from `IO a` to `IO (Either String a)`
			We want to account for the possibility of failure
		[X] Update tests
		[X] Rewrite our `IO` wrapper to stop on errors
		[X] Deficiencies
			I'd like to interpret ENV values as things other than strings (deferred)
			It'd be nice if we knew *all* the missing variables
				What can't monads do
				Our syntax is indicative of this
				; do a <- env "FOO"  -- < stops at this line!
				;    b <- env "BAR"
				;    return (Conf a b)
	Impv: Change semantics to IO (Either [String] a)
		[X] Write the Monad instance and show that we only get the first error
		[X] Rewrite the tests
		[X] Prove that the Applicative interface is sufficient for the example
		[X] Rewrite the tests to use this Applicative instance
		[X] Instantiate the obvious Monad->Applicative interface (return/ap)
		[X] Rewrite the example code to use the Applicative interface
		[X] Show that the tests still fail
		[X] Write a compliant Applicative instance
			: Now since we can look into the left and right sides in parallel
			: we can combine failures!
		[X] Test the behavior in the command line
	Impv: Static analysis
		: We'd like to be able to examine all of the needed ENV variables
		: without actually looking them up.
		[X] Extend data type to include two choices of semantics
		[X] Add the extra information in the `env` impl
		[X] Write in the information passing code in the Applicative instance
